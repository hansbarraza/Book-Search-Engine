{"version":3,"sources":["utils/auth.js","utils/localStorage.js","utils/mutations.js","pages/SearchBooks.js","utils/API.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["AuthService","_classCallCheck","_createClass","key","value","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","removeBookId","bookId","savedBookIds","JSON","parse","updatedSavedBookIds","filter","savedBookId","stringify","LOGIN_USER","gql","_templateObject","_taggedTemplateLiteral","ADD_USER","_templateObject2","SAVE_BOOK","_templateObject3","REMOVE_BOOK","_templateObject4","SearchBooks","_useState","useState","_useState2","_slicedToArray","searchedBooks","setSearchedBooks","_useState3","_useState4","searchInput","setSearchInput","_useState5","_useState6","setSavedBookIds","_useMutation","useMutation","saveBook","useEffect","bookIdArr","length","handleFormSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","response","_yield$response$json","items","bookData","wrap","_context","prev","next","preventDefault","abrupt","fetch","concat","sent","ok","Error","json","map","book","_book$volumeInfo$imag","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","t0","console","error","stop","_x","apply","arguments","handleSaveBook","_ref2","_callee2","bookToSave","_yield$saveBook","_context2","find","Auth","loggedIn","variables","input","data","_toConsumableArray","_x2","_jsxs","_Fragment","children","_jsx","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","onClick","GET_ME","SavedBooks","_useQuery","useQuery","loading","removeBook","userData","me","handleDeleteBook","_yield$removeBook","savedBooks","SignupForm","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","_event$target","_objectSpread","_defineProperty","_yield$addUser","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","_yield$login","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","SignUpForm","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","cache","InMemoryCache","App","ApolloProvider","Router","Routes","Route","path","element","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.549c9a16.chunk.js","sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","export const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : [];\n\n  return savedBookIds;\n};\n\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem('saved_books', JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem('saved_books');\n  }\n};\n\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem('saved_books')\n    ? JSON.parse(localStorage.getItem('saved_books'))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter((savedBookId) => savedBookId !== bookId);\n  localStorage.setItem('saved_books', JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","import { gql } from \"@apollo/client\";\n\nexport const LOGIN_USER = gql`\n    mutation login($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n            token\n            user {\n                _id\n                username\n            }\n        }\n    }\n`;\n\nexport const ADD_USER = gql`\n    mutation addUser($username: String!, $email: String!, $password: String!) {\n        addUser(username: $username, email: $email, password: $password) {\n            token\n            user {\n                _id\n                username\n                email\n            }\n        }\n    }\n`;\n\nexport const SAVE_BOOK = gql`\n    mutation saveBook($input: savedBook) {\n        saveBook(input: $input) {\n            _id\n            username\n            bookCount\n            savedBooks {\n                # _id\n                authors\n                description\n                title\n                bookId\n                image\n                link\n            }\n        }\n    }\n`;\n\nexport const REMOVE_BOOK = gql`\n    mutation removeBook($bookId: ID!) {\n        removeBook(bookId: $bookId) {\n            _id\n            username\n            email\n            savedBooks {\n                bookId\n                authors\n                description\n                title\n                image\n                link\n            }\n        }\n    }\n`;","import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\nimport { useMutation } from \"@apollo/client\";\nimport { SAVE_BOOK } from '../utils/mutations';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      // const response = await saveBook(bookToSave, token);\n      const { data } = await saveBook({variables: {input: bookToSave}});\n\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// make a search to google books api\n// https://www.googleapis.com/books/v1/volumes?q=harry+potter\nexport const searchGoogleBooks = (query) => {\n  return fetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n};\n","import { gql } from '@apollo/client';\n\nexport const GET_ME = gql`\n    {\n        me {\n            _id\n            username\n            email\n            bookCount\n            savedBooks {\n                bookId\n                authors\n                description\n                title\n                image\n                link\n            }\n        }\n    }\n`;","import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { useQuery, useMutation} from '@apollo/client';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\n\nconst SavedBooks = () => {\n  const { loading, data } = useQuery(GET_ME);\n  const [removeBook] = useMutation(REMOVE_BOOK);\n\n  const userData = data?.me || {};\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeBook({variables: {bookId}});\n\n      if (!data) {\n        throw new Error('Failed to delete book!');\n      }\n      // // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n// create function that accepts the book's mongo _id value as param and deletes the book from the database\n\n// if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  //set variable for addUser mutation from mutations.js\n  const [addUser] = useMutation(ADD_USER);\n\n  // This function handles the change event for form input fields.\n  //It destructures the name and value from the event.target object.\n  //It uses the spread operator ({...userFormData}) to create a shallow copy of the userFormData object and updates the state with the new name and value key-value pair.\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    //It makes an asynchronous call to the addUser function with the userFormData as variables.\n    //If the call is successful, it logs in the user with the token returned from the server using Auth.login().\n    //If there is an error, it logs the error to the console and sets the showAlert state to true.\n    //Finally, it resets the userFormData state to empty values for username, email, and password.\n    try {\n      const { data } = await addUser({ variables: { ...userFormData }});\n    \n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\nimport Auth from '../utils/auth';\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [login] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n     \n      event.stopPropagation();\n    }\n\n    try {\n        const { data } = await login({variables: { email: userFormData.email, password: userFormData.password }});\n\n        Auth.login(data.login.token);\n        setShowAlert(false);\n  \n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Navbar, Nav, Container, Modal, Tab } from 'react-bootstrap';\nimport SignUpForm from './SignupForm';\nimport LoginForm from './LoginForm';\n\nimport Auth from '../utils/auth';\n\nconst AppNavbar = () => {\n  // set modal display state\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg='dark' variant='dark' expand='lg'>\n        <Container fluid>\n          <Navbar.Brand as={Link} to='/'>\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar' />\n          <Navbar.Collapse id='navbar'>\n            <Nav className='ml-auto'>\n              <Nav.Link as={Link} to='/'>\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to='/saved'>\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>Login/Sign Up</Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size='lg'\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby='signup-modal'>\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey='login'>\n          <Modal.Header closeButton>\n            <Modal.Title id='signup-modal'>\n              <Nav variant='pills'>\n                <Nav.Item>\n                  <Nav.Link eventKey='login'>Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey='signup'>Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey='login'>\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey='signup'>\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport SearchBooks from './pages/SearchBooks';\nimport SavedBooks from './pages/SavedBooks';\nimport Navbar from './components/Navbar';\nimport { ApolloProvider, InMemoryCache, ApolloClient, createHttpLink} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context'\n// import ApolloClient from 'apollo-boost'\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, {headers}) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: { ...headers, authorization: token? `Bearer ${token}` : ''}\n  };\n});\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n    <Router>\n      <>\n        <Navbar />\n        <Routes>\n          <Route \n            path='/' \n            element={<SearchBooks />} \n          />\n          <Route \n            path='/saved' \n            element={<SavedBooks />} \n          />\n          <Route \n            path='*'\n            element={<h1 className='display-2'>Wrong page!</h1>}\n          />\n        </Routes>\n      </>\n    </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}